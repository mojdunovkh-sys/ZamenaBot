import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties
from dateparser.search import search_dates
from datetime import datetime

TOKEN = "8443607513:AAHYWF7Tb9X0olHLgtPK_pmWPEOte9mM77A"

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

active_replacements = {}
private_messages = {}  # –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ª–∏—á–∫–µ

FIND_WORDS = ["–∏—â—É –∑–∞–º–µ–Ω—É", "–æ—Ç–¥–∞–º —Å–º–µ–Ω—É"]
OFFER_WORDS = ["–∑–∞–±–µ—Ä—É —Å–º–µ–Ω—É", "–æ—Ç–¥–∞–π—Ç–µ —Å–º–µ–Ω—É"]

SHIFT_KEYWORDS = {
    "—É—Ç—Ä–æ": "—Å —É—Ç—Ä–∞",
    "—Å —É—Ç—Ä–∞": "—Å —É—Ç—Ä–∞",
    "–≤–µ—á–µ—Ä": "—Å –≤–µ—á–µ—Ä–∞",
    "–≤–µ—á–µ—Ä–æ–º": "—Å –≤–µ—á–µ—Ä–∞",
}

ROLE_SYNONYMS = {
    "–æ—Ñ–∏—Ü–∏–∞–Ω—Ç": ["–æ—Ñ–∏—Ü–∏–∞–Ω—Ç", "–æ—Ñ–∏–∫", "–ø—Ä–∏–Ω–∏–º–∞—é—â–∏–π"],
    "—Ä–∞–∑–¥–∞—á–Ω–∏–∫": ["—Ä–∞–∑–¥–∞—á–Ω–∏–∫", "—Ä–∞–∑–¥–∞—á–∞", "—Ä–∞–∑–¥–∞—á–µ"],
    "—Ö–æ—Å—Ç–µ—Å": ["—Ö–æ—Å—Ç–µ—Å", "—Ö–æ—Å—Ç", "–Ω–∞ —Ö–æ—Å—Ç–µ"],
}


def highlight_dates(text: str):
    result = search_dates(
        text,
        languages=["ru"],
        settings={"PREFER_DATES_FROM": "future", "RELATIVE_BASE": datetime.now()},
    )
    if not result:
        return text, None

    new_text = text
    parsed_date = None
    for phrase, dt in result:
        parsed_date = dt.date()
        new_text = new_text.replace(phrase, f"üìÖ {dt.strftime('%d.%m.%Y')}")
    return new_text, parsed_date


def extract_shift(text: str):
    for k, v in SHIFT_KEYWORDS.items():
        if k in text.lower():
            return v
    return None


def extract_role(text: str):
    text_lower = text.lower()
    for role, variants in ROLE_SYNONYMS.items():
        for var in variants:
            if var in text_lower:
                return role
    return None


def cleanup_expired_replacements():
    now = datetime.now().date()
    expired = [msg_id for msg_id, r in active_replacements.items() if r["date"] and r["date"] < now]
    for msg_id in expired:
        active_replacements.pop(msg_id)


@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìã –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞–º–µ–Ω—ã", callback_data="show_active")]
    ])
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–º–µ–Ω.\n\n"
        "üìå –í –≥—Ä—É–ø–ø–µ –ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–∏–ø–∞:\n"
        "‚Äî '–ò—â—É –∑–∞–º–µ–Ω—É –∑–∞–≤—Ç—Ä–∞ –≤–µ—á–µ—Ä–æ–º –æ—Ñ–∏—Ü–∏–∞–Ω—Ç'\n"
        "‚Äî '–ó–∞–º–µ–Ω—é –≤ –ø—è—Ç–Ω–∏—Ü—É —Å —É—Ç—Ä–∞ —Ö–æ—Å—Ç–µ—Å'\n\n"
        "–Ø —Å–æ—Ö—Ä–∞–Ω—é –∏—Ö –∏ –ø–æ–∫–∞–∂—É —Å–ø–∏—Å–æ–∫ –ø–æ –∫–Ω–æ–ø–∫–µ.",
        reply_markup=kb
    )


@dp.message()
async def handle_message(message: types.Message):
    if message.chat.type == "private":
        return

    text = message.text.lower()
    if any(word in text for word in FIND_WORDS):
        await handle_replacement(message, mode="find")
    elif any(word in text for word in OFFER_WORDS):
        await handle_replacement(message, mode="offer")


async def handle_replacement(message: types.Message, mode: str):
    user = message.from_user
    text_with_date, parsed_date = highlight_dates(message.text)
    shift = extract_shift(message.text)
    role = extract_role(message.text)

    if mode == "find":
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –í–∑—è—Ç—å —Å–º–µ–Ω—É", callback_data="take")]
        ])
        header = "üìå –ó–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–º–µ–Ω—É"
        short = f"@{user.username or user.full_name} —Ö–æ—á–µ—Ç –æ—Ç–¥–∞—Ç—å —Å–º–µ–Ω—É"
    else:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì§ –û—Ç–¥–∞—Ç—å —Å–º–µ–Ω—É", callback_data="give")]
        ])
        header = "üìå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∑–∞–º–µ–Ω—ã"
        short = f"@{user.username or user.full_name} –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∑–∞–º–µ–Ω–∏—Ç—å"

    msg = await message.answer(
        f"{header}:\n\n"
        f"{short}\n"
        f"üë§ –î–æ–ª–∂–Ω–æ—Å—Ç—å: {role or '—Å–æ—Ç—Ä—É–¥–Ω–∏–∫'}\n"
        f"üïê –°–º–µ–Ω–∞: {shift or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"üìÖ –î–∞—Ç–∞: {parsed_date.strftime('%d.%m.%Y') if parsed_date else '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}",
        reply_markup=kb
    )

    try:
        await message.delete()
    except:
        pass

    active_replacements[msg.message_id] = {
        "mode": mode,
        "author": user.username or user.full_name,
        "author_id": user.id,
        "date": parsed_date,
        "shift": shift,
        "role": role,
        "chat_id": message.chat.id,
        "msg_id": msg.message_id,
    }


@dp.callback_query()
async def handle_callback(callback: types.CallbackQuery):
    user = callback.from_user
    data = callback.data

    if data == "show_active":
        cleanup_expired_replacements()

        if user.id in private_messages:
            for msg_id in private_messages[user.id]:
                try:
                    await bot.delete_message(user.id, msg_id)
                except:
                    pass
            private_messages[user.id] = []

        if not active_replacements:
            sent = await callback.message.answer("–°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–º–µ–Ω ‚úÖ")
            private_messages.setdefault(user.id, []).append(sent.message_id)
            return

        text = "üìã <b>–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞–º–µ–Ω—ã:</b>\n\n"
        for r in active_replacements.values():
            link = f"https://t.me/c/{str(r['chat_id'])[4:]}/{r['msg_id']}"
            text += (
                f"‚Äî @{r['author']} "
                f"üë§ {r['role'] or '—Å–æ—Ç—Ä—É–¥–Ω–∏–∫'} "
                f"üïê {r['shift'] or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'} "
                f"{'üìÖ ' + r['date'].strftime('%d.%m.%Y') if r['date'] else ''}\n"
                f"<a href='{link}'>üîó –û—Ç–∫—Ä—ã—Ç—å –≤ —á–∞—Ç–µ</a>\n\n"
            )

        sent = await callback.message.answer(text)
        private_messages.setdefault(user.id, []).append(sent.message_id)
        return

    if data == "make_hvanch":
        try:
            await callback.message.delete()
        except:
            pass

        parts = callback.message.text.split("\n")
        role_line = [p for p in parts if p.startswith("üë§")]
        shift_line = [p for p in parts if p.startswith("üïê")]
        date_line = [p for p in parts if p.startswith("üìÖ")]
        user_line = parts[0]

        role = role_line[0].replace("üë§ –î–æ–ª–∂–Ω–æ—Å—Ç—å: ", "") if role_line else "—Å–æ—Ç—Ä—É–¥–Ω–∏–∫"
        shift = shift_line[0].replace("üïê –°–º–µ–Ω–∞: ", "") if shift_line else "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"
        date = date_line[0].replace("üìÖ ", "") if date_line else "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"

        if "–∑–∞–±—Ä–∞–ª" in user_line or "–∑–∞–º–µ–Ω–∏—Ç" in user_line:
            target_user = user_line.split()[1]
        else:
            target_user = "@user"

        new_text = (
            f"‚ú® <b>–ó–∞–º–µ–Ω–∞</b> ‚ú®\n\n"
            f"–î–æ—Ä–æ–≥–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∏–¥–∑–µ,\n"
            f"–º–æ–∂–Ω–æ –≤—ã–π–¥—É –∑–∞ {target_user}\n\n"
            f"üìÖ –î–∞—Ç–∞: {date}\n"
            f"üïê –°–º–µ–Ω–∞: {shift}\n"
            f"üë§ –î–æ–ª–∂–Ω–æ—Å—Ç—å: {role}\n\n"
            f"–û–¥–æ–±—Ä—è–µ—Ç–µ? @sshev07 @sssdinara"
        )

        await callback.message.answer(new_text)
        return

    msg_id = callback.message.message_id
    if msg_id not in active_replacements:
        await callback.answer("–≠—Ç–∞ –∑–∞–º–µ–Ω–∞ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞ ‚ùå", show_alert=True)
        return

    r = active_replacements.pop(msg_id)

    hvanch_btn = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="–°–¥–µ–ª–∞—Ç—å –º–∞–∫–µ—Ç –¥–ª—è –•–í–ê–ù–ß", callback_data="make_hvanch")]]
    )

    if r["mode"] == "find" and data == "take":
        new_text = (
            f"‚úÖ @{user.username or user.full_name} –∑–∞–º–µ–Ω–∏—Ç @{r['author']}\n"
            f"üë§ –î–æ–ª–∂–Ω–æ—Å—Ç—å: {r['role'] or '—Å–æ—Ç—Ä—É–¥–Ω–∏–∫'}\n"
            f"üïê –°–º–µ–Ω–∞: {r['shift'] or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"üìÖ {r['date'].strftime('%d.%m.%Y') if r['date'] else '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}"
        )
        await bot.send_message(r["author_id"], new_text, reply_markup=hvanch_btn)
        await bot.send_message(user.id, new_text.replace("–∑–∞–º–µ–Ω–∏—Ç", "–≤—ã –∑–∞–º–µ–Ω–∏—Ç–µ"), reply_markup=hvanch_btn)

    elif r["mode"] == "offer" and data == "give":
        new_text = (
            f"‚úÖ @{r['author']} –∑–∞–º–µ–Ω–∏—Ç @{user.username or user.full_name}\n"
            f"üë§ –î–æ–ª–∂–Ω–æ—Å—Ç—å: {r['role'] or '—Å–æ—Ç—Ä—É–¥–Ω–∏–∫'}\n"
            f"üïê –°–º–µ–Ω–∞: {r['shift'] or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"üìÖ {r['date'].strftime('%d.%m.%Y') if r['date'] else '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}"
        )
        await bot.send_message(r["author_id"], new_text, reply_markup=hvanch_btn)
        await bot.send_message(user.id, new_text.replace("–∑–∞–º–µ–Ω–∏—Ç", "–≤—ã –ø—Ä–∏–Ω—è–ª–∏ —Å–º–µ–Ω—É —É"), reply_markup=hvanch_btn)

    await callback.message.edit_text(new_text)


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
